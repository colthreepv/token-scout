// Generated by @wagmi/cli@1.0.0 on 5/15/2023 at 10:10:57 AM
import {
  Address,
  UseContractEventConfig,
  UseContractReadConfig,
  UseContractWriteConfig,
  UsePrepareContractWriteConfig,
  useContractEvent,
  useContractRead,
  useContractWrite,
  useNetwork,
  usePrepareContractWrite,
} from 'wagmi'
import {
  PrepareWriteContractResult,
  ReadContractResult,
  WriteContractMode,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UniswapV3Factory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1F98431c8aD98523631AE4a59f267346ea31F984)
 */
export const uniswapV3FactoryABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'fee', internalType: 'uint24', type: 'uint24', indexed: true },
      {
        name: 'tickSpacing',
        internalType: 'int24',
        type: 'int24',
        indexed: true,
      },
    ],
    name: 'FeeAmountEnabled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token0',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token1',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'fee', internalType: 'uint24', type: 'uint24', indexed: true },
      {
        name: 'tickSpacing',
        internalType: 'int24',
        type: 'int24',
        indexed: false,
      },
      {
        name: 'pool',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PoolCreated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
      { name: 'fee', internalType: 'uint24', type: 'uint24' },
    ],
    name: 'createPool',
    outputs: [{ name: 'pool', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'fee', internalType: 'uint24', type: 'uint24' },
      { name: 'tickSpacing', internalType: 'int24', type: 'int24' },
    ],
    name: 'enableFeeAmount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint24', type: 'uint24' }],
    name: 'feeAmountTickSpacing',
    outputs: [{ name: '', internalType: 'int24', type: 'int24' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint24', type: 'uint24' },
    ],
    name: 'getPool',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'parameters',
    outputs: [
      { name: 'factory', internalType: 'address', type: 'address' },
      { name: 'token0', internalType: 'address', type: 'address' },
      { name: 'token1', internalType: 'address', type: 'address' },
      { name: 'fee', internalType: 'uint24', type: 'uint24' },
      { name: 'tickSpacing', internalType: 'int24', type: 'int24' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
] as const

/**
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1F98431c8aD98523631AE4a59f267346ea31F984)
 */
export const uniswapV3FactoryAddress = {
  56: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',
  42161: '0x1F98431c8aD98523631AE4a59f267346ea31F984',
} as const

/**
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1F98431c8aD98523631AE4a59f267346ea31F984)
 */
export const uniswapV3FactoryConfig = {
  address: uniswapV3FactoryAddress,
  abi: uniswapV3FactoryABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uniswapV3FactoryABI}__.
 *
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1F98431c8aD98523631AE4a59f267346ea31F984)
 */
export function useUniswapV3FactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof uniswapV3FactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof uniswapV3FactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address'
  > & { chainId?: keyof typeof uniswapV3FactoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: uniswapV3FactoryABI,
    address:
      uniswapV3FactoryAddress[chainId as keyof typeof uniswapV3FactoryAddress],
    ...config,
  } as UseContractReadConfig<
    typeof uniswapV3FactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uniswapV3FactoryABI}__ and `functionName` set to `"feeAmountTickSpacing"`.
 *
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1F98431c8aD98523631AE4a59f267346ea31F984)
 */
export function useUniswapV3FactoryFeeAmountTickSpacing<
  TFunctionName extends 'feeAmountTickSpacing',
  TSelectData = ReadContractResult<typeof uniswapV3FactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof uniswapV3FactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof uniswapV3FactoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: uniswapV3FactoryABI,
    address:
      uniswapV3FactoryAddress[chainId as keyof typeof uniswapV3FactoryAddress],
    functionName: 'feeAmountTickSpacing',
    ...config,
  } as UseContractReadConfig<
    typeof uniswapV3FactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uniswapV3FactoryABI}__ and `functionName` set to `"getPool"`.
 *
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1F98431c8aD98523631AE4a59f267346ea31F984)
 */
export function useUniswapV3FactoryGetPool<
  TFunctionName extends 'getPool',
  TSelectData = ReadContractResult<typeof uniswapV3FactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof uniswapV3FactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof uniswapV3FactoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: uniswapV3FactoryABI,
    address:
      uniswapV3FactoryAddress[chainId as keyof typeof uniswapV3FactoryAddress],
    functionName: 'getPool',
    ...config,
  } as UseContractReadConfig<
    typeof uniswapV3FactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uniswapV3FactoryABI}__ and `functionName` set to `"owner"`.
 *
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1F98431c8aD98523631AE4a59f267346ea31F984)
 */
export function useUniswapV3FactoryOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof uniswapV3FactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof uniswapV3FactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof uniswapV3FactoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: uniswapV3FactoryABI,
    address:
      uniswapV3FactoryAddress[chainId as keyof typeof uniswapV3FactoryAddress],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof uniswapV3FactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uniswapV3FactoryABI}__ and `functionName` set to `"parameters"`.
 *
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1F98431c8aD98523631AE4a59f267346ea31F984)
 */
export function useUniswapV3FactoryParameters<
  TFunctionName extends 'parameters',
  TSelectData = ReadContractResult<typeof uniswapV3FactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof uniswapV3FactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof uniswapV3FactoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: uniswapV3FactoryABI,
    address:
      uniswapV3FactoryAddress[chainId as keyof typeof uniswapV3FactoryAddress],
    functionName: 'parameters',
    ...config,
  } as UseContractReadConfig<
    typeof uniswapV3FactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uniswapV3FactoryABI}__.
 *
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1F98431c8aD98523631AE4a59f267346ea31F984)
 */
export function useUniswapV3FactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof uniswapV3FactoryAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof uniswapV3FactoryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof uniswapV3FactoryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof uniswapV3FactoryABI, TFunctionName, TMode>({
    abi: uniswapV3FactoryABI,
    address:
      uniswapV3FactoryAddress[chainId as keyof typeof uniswapV3FactoryAddress],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uniswapV3FactoryABI}__ and `functionName` set to `"createPool"`.
 *
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1F98431c8aD98523631AE4a59f267346ea31F984)
 */
export function useUniswapV3FactoryCreatePool<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof uniswapV3FactoryAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof uniswapV3FactoryABI,
          'createPool'
        >['request']['abi'],
        'createPool',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'createPool' }
    : UseContractWriteConfig<
        typeof uniswapV3FactoryABI,
        'createPool',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'createPool'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof uniswapV3FactoryABI, 'createPool', TMode>({
    abi: uniswapV3FactoryABI,
    address:
      uniswapV3FactoryAddress[chainId as keyof typeof uniswapV3FactoryAddress],
    functionName: 'createPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uniswapV3FactoryABI}__ and `functionName` set to `"enableFeeAmount"`.
 *
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1F98431c8aD98523631AE4a59f267346ea31F984)
 */
export function useUniswapV3FactoryEnableFeeAmount<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof uniswapV3FactoryAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof uniswapV3FactoryABI,
          'enableFeeAmount'
        >['request']['abi'],
        'enableFeeAmount',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'enableFeeAmount'
      }
    : UseContractWriteConfig<
        typeof uniswapV3FactoryABI,
        'enableFeeAmount',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'enableFeeAmount'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof uniswapV3FactoryABI, 'enableFeeAmount', TMode>(
    {
      abi: uniswapV3FactoryABI,
      address:
        uniswapV3FactoryAddress[
          chainId as keyof typeof uniswapV3FactoryAddress
        ],
      functionName: 'enableFeeAmount',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uniswapV3FactoryABI}__ and `functionName` set to `"setOwner"`.
 *
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1F98431c8aD98523631AE4a59f267346ea31F984)
 */
export function useUniswapV3FactorySetOwner<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof uniswapV3FactoryAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof uniswapV3FactoryABI,
          'setOwner'
        >['request']['abi'],
        'setOwner',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setOwner' }
    : UseContractWriteConfig<typeof uniswapV3FactoryABI, 'setOwner', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setOwner'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof uniswapV3FactoryABI, 'setOwner', TMode>({
    abi: uniswapV3FactoryABI,
    address:
      uniswapV3FactoryAddress[chainId as keyof typeof uniswapV3FactoryAddress],
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uniswapV3FactoryABI}__.
 *
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1F98431c8aD98523631AE4a59f267346ea31F984)
 */
export function usePrepareUniswapV3FactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof uniswapV3FactoryABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof uniswapV3FactoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: uniswapV3FactoryABI,
    address:
      uniswapV3FactoryAddress[chainId as keyof typeof uniswapV3FactoryAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof uniswapV3FactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uniswapV3FactoryABI}__ and `functionName` set to `"createPool"`.
 *
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1F98431c8aD98523631AE4a59f267346ea31F984)
 */
export function usePrepareUniswapV3FactoryCreatePool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof uniswapV3FactoryABI, 'createPool'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof uniswapV3FactoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: uniswapV3FactoryABI,
    address:
      uniswapV3FactoryAddress[chainId as keyof typeof uniswapV3FactoryAddress],
    functionName: 'createPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof uniswapV3FactoryABI, 'createPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uniswapV3FactoryABI}__ and `functionName` set to `"enableFeeAmount"`.
 *
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1F98431c8aD98523631AE4a59f267346ea31F984)
 */
export function usePrepareUniswapV3FactoryEnableFeeAmount(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof uniswapV3FactoryABI,
      'enableFeeAmount'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof uniswapV3FactoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: uniswapV3FactoryABI,
    address:
      uniswapV3FactoryAddress[chainId as keyof typeof uniswapV3FactoryAddress],
    functionName: 'enableFeeAmount',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof uniswapV3FactoryABI,
    'enableFeeAmount'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uniswapV3FactoryABI}__ and `functionName` set to `"setOwner"`.
 *
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1F98431c8aD98523631AE4a59f267346ea31F984)
 */
export function usePrepareUniswapV3FactorySetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof uniswapV3FactoryABI, 'setOwner'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof uniswapV3FactoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: uniswapV3FactoryABI,
    address:
      uniswapV3FactoryAddress[chainId as keyof typeof uniswapV3FactoryAddress],
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof uniswapV3FactoryABI, 'setOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uniswapV3FactoryABI}__.
 *
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1F98431c8aD98523631AE4a59f267346ea31F984)
 */
export function useUniswapV3FactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof uniswapV3FactoryABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof uniswapV3FactoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: uniswapV3FactoryABI,
    address:
      uniswapV3FactoryAddress[chainId as keyof typeof uniswapV3FactoryAddress],
    ...config,
  } as UseContractEventConfig<typeof uniswapV3FactoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uniswapV3FactoryABI}__ and `eventName` set to `"FeeAmountEnabled"`.
 *
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1F98431c8aD98523631AE4a59f267346ea31F984)
 */
export function useUniswapV3FactoryFeeAmountEnabledEvent(
  config: Omit<
    UseContractEventConfig<typeof uniswapV3FactoryABI, 'FeeAmountEnabled'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof uniswapV3FactoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: uniswapV3FactoryABI,
    address:
      uniswapV3FactoryAddress[chainId as keyof typeof uniswapV3FactoryAddress],
    eventName: 'FeeAmountEnabled',
    ...config,
  } as UseContractEventConfig<typeof uniswapV3FactoryABI, 'FeeAmountEnabled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uniswapV3FactoryABI}__ and `eventName` set to `"OwnerChanged"`.
 *
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1F98431c8aD98523631AE4a59f267346ea31F984)
 */
export function useUniswapV3FactoryOwnerChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof uniswapV3FactoryABI, 'OwnerChanged'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof uniswapV3FactoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: uniswapV3FactoryABI,
    address:
      uniswapV3FactoryAddress[chainId as keyof typeof uniswapV3FactoryAddress],
    eventName: 'OwnerChanged',
    ...config,
  } as UseContractEventConfig<typeof uniswapV3FactoryABI, 'OwnerChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uniswapV3FactoryABI}__ and `eventName` set to `"PoolCreated"`.
 *
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1F98431c8aD98523631AE4a59f267346ea31F984)
 */
export function useUniswapV3FactoryPoolCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof uniswapV3FactoryABI, 'PoolCreated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof uniswapV3FactoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: uniswapV3FactoryABI,
    address:
      uniswapV3FactoryAddress[chainId as keyof typeof uniswapV3FactoryAddress],
    eventName: 'PoolCreated',
    ...config,
  } as UseContractEventConfig<typeof uniswapV3FactoryABI, 'PoolCreated'>)
}
